/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Mon Jan  6 00:29:29 2025.
 */

#ifndef SIMPLE_H
#define SIMPLE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SIMPLE_DRIVER_HEARTBEAT_FRAME_ID (0x64u)
#define SIMPLE_IO_DEBUG_FRAME_ID (0x1f4u)
#define SIMPLE_MOTOR_CMD_FRAME_ID (0x65u)
#define SIMPLE_MOTOR_STATUS_FRAME_ID (0x190u)

/* Frame lengths in bytes. */
#define SIMPLE_DRIVER_HEARTBEAT_LENGTH (1u)
#define SIMPLE_IO_DEBUG_LENGTH (4u)
#define SIMPLE_MOTOR_CMD_LENGTH (1u)
#define SIMPLE_MOTOR_STATUS_LENGTH (3u)

/* Extended or standard frame types. */
#define SIMPLE_DRIVER_HEARTBEAT_IS_EXTENDED (0)
#define SIMPLE_IO_DEBUG_IS_EXTENDED (0)
#define SIMPLE_MOTOR_CMD_IS_EXTENDED (0)
#define SIMPLE_MOTOR_STATUS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define SIMPLE_DRIVER_HEARTBEAT_CYCLE_TIME_MS (1000u)
#define SIMPLE_IO_DEBUG_CYCLE_TIME_MS (100u)
#define SIMPLE_MOTOR_CMD_CYCLE_TIME_MS (100u)
#define SIMPLE_MOTOR_STATUS_CYCLE_TIME_MS (100u)

/* Signal choices. */
#define SIMPLE_DRIVER_HEARTBEAT_DRIVER_HEARTBEAT_CMD_DRIVER_HEARTBEAT_CMD_NOOP_CHOICE (0u)
#define SIMPLE_DRIVER_HEARTBEAT_DRIVER_HEARTBEAT_CMD_DRIVER_HEARTBEAT_CMD_SYNC_CHOICE (1u)
#define SIMPLE_DRIVER_HEARTBEAT_DRIVER_HEARTBEAT_CMD_DRIVER_HEARTBEAT_CMD_REBOOT_CHOICE (2u)

#define SIMPLE_IO_DEBUG_IO_DEBUG_TEST_ENUM_IO_DEBUG_TEST2_ENUM_ONE_CHOICE (1u)
#define SIMPLE_IO_DEBUG_IO_DEBUG_TEST_ENUM_IO_DEBUG_TEST2_ENUM_TWO_CHOICE (2u)

/**
 * Signals in message DRIVER_HEARTBEAT.
 *
 * Sync message used to synchronize the controllers
 *
 * All signal values are as on the CAN bus.
 */
struct simple_driver_heartbeat_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_heartbeat_cmd;
};

/**
 * Signals in message IO_DEBUG.
 *
 * All signal values are as on the CAN bus.
 */
struct simple_io_debug_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t io_debug_test_unsigned;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t io_debug_test_enum;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t io_debug_test_signed;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t io_debug_test_float;
};

/**
 * Signals in message MOTOR_CMD.
 *
 * All signal values are as on the CAN bus.
 */
struct simple_motor_cmd_t {
    /**
     * Range: 0..10 (-5..5 -)
     * Scale: 1
     * Offset: -5
     */
    int8_t motor_cmd_steer;

    /**
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_cmd_drive;
};

/**
 * Signals in message MOTOR_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct simple_motor_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_status_wheel_error;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t motor_status_speed_kph;
};

/**
 * Pack message DRIVER_HEARTBEAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int simple_driver_heartbeat_pack(
    uint8_t *dst_p,
    const struct simple_driver_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message DRIVER_HEARTBEAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int simple_driver_heartbeat_unpack(
    struct simple_driver_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t simple_driver_heartbeat_driver_heartbeat_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double simple_driver_heartbeat_driver_heartbeat_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool simple_driver_heartbeat_driver_heartbeat_cmd_is_in_range(uint8_t value);

/**
 * Pack message IO_DEBUG.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int simple_io_debug_pack(
    uint8_t *dst_p,
    const struct simple_io_debug_t *src_p,
    size_t size);

/**
 * Unpack message IO_DEBUG.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int simple_io_debug_unpack(
    struct simple_io_debug_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t simple_io_debug_io_debug_test_unsigned_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double simple_io_debug_io_debug_test_unsigned_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool simple_io_debug_io_debug_test_unsigned_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t simple_io_debug_io_debug_test_enum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double simple_io_debug_io_debug_test_enum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool simple_io_debug_io_debug_test_enum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t simple_io_debug_io_debug_test_signed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double simple_io_debug_io_debug_test_signed_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool simple_io_debug_io_debug_test_signed_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t simple_io_debug_io_debug_test_float_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double simple_io_debug_io_debug_test_float_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool simple_io_debug_io_debug_test_float_is_in_range(uint8_t value);

/**
 * Pack message MOTOR_CMD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int simple_motor_cmd_pack(
    uint8_t *dst_p,
    const struct simple_motor_cmd_t *src_p,
    size_t size);

/**
 * Unpack message MOTOR_CMD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int simple_motor_cmd_unpack(
    struct simple_motor_cmd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t simple_motor_cmd_motor_cmd_steer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double simple_motor_cmd_motor_cmd_steer_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool simple_motor_cmd_motor_cmd_steer_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t simple_motor_cmd_motor_cmd_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double simple_motor_cmd_motor_cmd_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool simple_motor_cmd_motor_cmd_drive_is_in_range(uint8_t value);

/**
 * Pack message MOTOR_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int simple_motor_status_pack(
    uint8_t *dst_p,
    const struct simple_motor_status_t *src_p,
    size_t size);

/**
 * Unpack message MOTOR_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int simple_motor_status_unpack(
    struct simple_motor_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t simple_motor_status_motor_status_wheel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double simple_motor_status_motor_status_wheel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool simple_motor_status_motor_status_wheel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t simple_motor_status_motor_status_speed_kph_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double simple_motor_status_motor_status_speed_kph_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool simple_motor_status_motor_status_speed_kph_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
