
/**
 * This file was generated by GHESBORO OMAR!! impazzisco - version 0.1.
 */

#ifndef EXPECTED_H
#define EXPECTED_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define EXPECTED_MSG_0_FRAME_ID (0x1u)
#define EXPECTED_MSG_1_FRAME_ID (0x2u)
#define EXPECTED_MSG_2_FRAME_ID (0x3u)
#define EXPECTED_MSG_3_FRAME_ID (0x4u)

/* Frame lengths in bytes. */
#define EXPECTED_MSG_0_LENGTH (8u)
#define EXPECTED_MSG_1_LENGTH (8u)
#define EXPECTED_MSG_2_LENGTH (8u)
#define EXPECTED_MSG_3_LENGTH (1u)

/* Extended or standard frame types. */
#define EXPECTED_MSG_0_IS_EXTENDED (0)
#define EXPECTED_MSG_1_IS_EXTENDED (0)
#define EXPECTED_MSG_2_IS_EXTENDED (0)
#define EXPECTED_MSG_3_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define EXPECTED_MSG_0_CYCLE_TIME_MS (0u)
#define EXPECTED_MSG_1_CYCLE_TIME_MS (0u)
#define EXPECTED_MSG_2_CYCLE_TIME_MS (10u)
#define EXPECTED_MSG_3_CYCLE_TIME_MS (0u)

/* Signal choices. */
#define EXPECTED_MSG_2_ENUM_SIG_0_VALUE_0_CHOICE (0u)
#define EXPECTED_MSG_2_ENUM_SIG_0_VALUE_1_CHOICE (1u)
#define EXPECTED_MSG_2_ENUM_SIG_0_VALUE_15_CHOICE (15u)

/* Frame Names. */
#define EXPECTED_MSG_0_NAME ("msg_0")
#define EXPECTED_MSG_1_NAME ("msg_1")
#define EXPECTED_MSG_2_NAME ("msg_2")
#define EXPECTED_MSG_3_NAME ("msg_3")

/* Signal Names. */
#define EXPECTED_MSG_0_STD_SIG_0_NAME ("std_sig_0")
#define EXPECTED_MSG_0_MUX_SIG_0_NAME ("mux_sig_0")
#define EXPECTED_MSG_1_MUX_SIG_1_NAME ("mux_sig_1")
#define EXPECTED_MSG_2_ENUM_SIG_0_NAME ("enum_sig_0")
#define EXPECTED_MSG_3_STD_SIG_1_NAME ("std_sig_1")
#define EXPECTED_MSG_3_STD_SIG_2_NAME ("std_sig_2")


/**
 * Signals in message msg_0.
 *
 * All signal values are as on the CAN bus.
 *
 */
struct expected_msg_0_t { 
    /**
     * Range: 0..15 (0.00000..15.00000 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t std_sig_0;
};

/**
 * Signals in message msg_1.
 *
 * All signal values are as on the CAN bus.
 *
 */
struct expected_msg_1_t { };

/**
 * Signals in message msg_2.
 *
 * All signal values are as on the CAN bus.
 *
 */
struct expected_msg_2_t { 
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t enum_sig_0;
};

/**
 * Signals in message msg_3.
 *
 * All signal values are as on the CAN bus.
 *
 */
struct expected_msg_3_t { 
    /**
     * Range: 0..15 (0.00000..15.00000 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t std_sig_1;

    /**
     * Range: 0..15 (0.00000..15.00000 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t std_sig_2;
};

/**
 * Pack message msg_0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int expected_msg_0_pack(
    uint8_t *dst_p,
    const struct expected_msg_0_t *src_p,
    size_t size);

/**
 * Unpack message msg_0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int expected_msg_0_unpack(
    struct expected_msg_0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t expected_msg_0_std_sig_0_encode(double value);

/** Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double expected_msg_0_std_sig_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool expected_msg_0_std_sig_0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t expected_msg_0_mux_sig_0_encode(double value);

/** Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double expected_msg_0_mux_sig_0_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool expected_msg_0_mux_sig_0_is_in_range(uint16_t value);

/**
 * Pack message msg_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int expected_msg_1_pack(
    uint8_t *dst_p,
    const struct expected_msg_1_t *src_p,
    size_t size);

/**
 * Unpack message msg_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int expected_msg_1_unpack(
    struct expected_msg_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t expected_msg_1_mux_sig_1_encode(double value);

/** Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double expected_msg_1_mux_sig_1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool expected_msg_1_mux_sig_1_is_in_range(uint16_t value);

/**
 * Pack message msg_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int expected_msg_2_pack(
    uint8_t *dst_p,
    const struct expected_msg_2_t *src_p,
    size_t size);

/**
 * Unpack message msg_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int expected_msg_2_unpack(
    struct expected_msg_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t expected_msg_2_enum_sig_0_encode(double value);

/** Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double expected_msg_2_enum_sig_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool expected_msg_2_enum_sig_0_is_in_range(uint16_t value);

/**
 * Pack message msg_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int expected_msg_3_pack(
    uint8_t *dst_p,
    const struct expected_msg_3_t *src_p,
    size_t size);

/**
 * Unpack message msg_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int expected_msg_3_unpack(
    struct expected_msg_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t expected_msg_3_std_sig_1_encode(double value);

/** Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double expected_msg_3_std_sig_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool expected_msg_3_std_sig_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t expected_msg_3_std_sig_2_encode(double value);

/** Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double expected_msg_3_std_sig_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool expected_msg_3_std_sig_2_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
