
 
/**
 * This file was generated by GHESBORO OMAR!! impazzisco - version 0.1.
 */

#ifndef SIMPLE_H
#define SIMPLE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SIMPLE_DRIVER_HEARTBEAT_FRAME_ID (0x64u)
#define SIMPLE_MOTOR_CMD_FRAME_ID (0x65u)
#define SIMPLE_IO_DEBUG_FRAME_ID (0x1F4u)
#define SIMPLE_MOTOR_STATUS_FRAME_ID (0x190u)

/* Frame lengths in bytes. */
#define SIMPLE_DRIVER_HEARTBEAT_LENGTH (1u)
#define SIMPLE_MOTOR_CMD_LENGTH (1u)
#define SIMPLE_IO_DEBUG_LENGTH (4u)
#define SIMPLE_MOTOR_STATUS_LENGTH (3u)

/* Extended or standard frame types. */
#define SIMPLE_DRIVER_HEARTBEAT_IS_EXTENDED (0)
#define SIMPLE_MOTOR_CMD_IS_EXTENDED (0)
#define SIMPLE_IO_DEBUG_IS_EXTENDED (0)
#define SIMPLE_MOTOR_STATUS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define SIMPLE_DRIVER_HEARTBEAT_CYCLE_TIME_MS (1000u)
#define SIMPLE_MOTOR_CMD_CYCLE_TIME_MS (100u)
#define SIMPLE_IO_DEBUG_CYCLE_TIME_MS (100u)
#define SIMPLE_MOTOR_STATUS_CYCLE_TIME_MS (100u)

/* Signal choices. */
#define SIMPLE_DRIVER_HEARTBEAT_DRIVER_HEARTBEAT_CMD_DRIVER_HEARTBEAT_CMD_NOOP_CHOICE (0u)
#define SIMPLE_DRIVER_HEARTBEAT_DRIVER_HEARTBEAT_CMD_DRIVER_HEARTBEAT_CMD_SYNC_CHOICE (1u)
#define SIMPLE_DRIVER_HEARTBEAT_DRIVER_HEARTBEAT_CMD_DRIVER_HEARTBEAT_CMD_REBOOT_CHOICE (2u)
#define SIMPLE_IO_DEBUG_IO_DEBUG_TEST_ENUM_IO_DEBUG_TEST2_ENUM_ONE_CHOICE (1u)
#define SIMPLE_IO_DEBUG_IO_DEBUG_TEST_ENUM_IO_DEBUG_TEST2_ENUM_TWO_CHOICE (2u)

/* Frame Names. */
#define SIMPLE_DRIVER_HEARTBEAT_NAME ("DRIVER_HEARTBEAT")
#define SIMPLE_MOTOR_CMD_NAME ("MOTOR_CMD")
#define SIMPLE_IO_DEBUG_NAME ("IO_DEBUG")
#define SIMPLE_MOTOR_STATUS_NAME ("MOTOR_STATUS")

/* Signal Names. */
#define SIMPLE_DRIVER_HEARTBEAT_DRIVER_HEARTBEAT_CMD_NAME ("DRIVER_HEARTBEAT_cmd")
#define SIMPLE_MOTOR_CMD_MOTOR_CMD_STEER_NAME ("MOTOR_CMD_steer")
#define SIMPLE_MOTOR_CMD_MOTOR_CMD_DRIVE_NAME ("MOTOR_CMD_drive")
#define SIMPLE_IO_DEBUG_IO_DEBUG_TEST_UNSIGNED_NAME ("IO_DEBUG_test_unsigned")
#define SIMPLE_IO_DEBUG_IO_DEBUG_TEST_ENUM_NAME ("IO_DEBUG_test_enum")
#define SIMPLE_IO_DEBUG_IO_DEBUG_TEST_SIGNED_NAME ("IO_DEBUG_test_signed")
#define SIMPLE_IO_DEBUG_IO_DEBUG_TEST_FLOAT_NAME ("IO_DEBUG_test_float")
#define SIMPLE_MOTOR_STATUS_MOTOR_STATUS_WHEEL_ERROR_NAME ("MOTOR_STATUS_wheel_error")
#define SIMPLE_MOTOR_STATUS_MOTOR_STATUS_SPEED_KPH_NAME ("MOTOR_STATUS_speed_kph")

/* Struct */
/* Declarations */ 


/* Signals in message DRIVER_HEARTBEAT */
struct simple_driver_heartbeat_t {

    /**
     * Range: 
     * Scale:
     * Offset:
     * start value: 0
     * send type: unset
     * get start bit: 0
     * get size: 2
     */
    uint8_t driver_heartbeat_cmd;
    
};

/* Signals in message MOTOR_CMD */
struct simple_motor_cmd_t {

    /**
     * Range: 
     * Scale:
     * Offset:
     * start value: 0
     * send type: unset
     * get start bit: 0
     * get size: 4
     */
    uint8_t motor_cmd_steer;
    
    /**
     * Range: 
     * Scale:
     * Offset:
     * start value: 0
     * send type: unset
     * get start bit: 4
     * get size: 4
     */
    uint8_t motor_cmd_drive;
    
};

/* Signals in message IO_DEBUG */
struct simple_io_debug_t {

    /**
     * Range: 
     * Scale:
     * Offset:
     * start value: 0
     * send type: unset
     * get start bit: 0
     * get size: 8
     */
    uint8_t io_debug_test_unsigned;
    
    /**
     * Range: 
     * Scale:
     * Offset:
     * start value: 0
     * send type: unset
     * get start bit: 8
     * get size: 2
     */
    uint8_t io_debug_test_enum;
    
    /**
     * Range: 
     * Scale:
     * Offset:
     * start value: 0
     * send type: unset
     * get start bit: 16
     * get size: 8
     */
    uint8_t io_debug_test_signed;
    
    /**
     * Range: 
     * Scale:
     * Offset:
     * start value: 0
     * send type: unset
     * get start bit: 24
     * get size: 8
     */
    uint8_t io_debug_test_float;
    
};

/* Signals in message MOTOR_STATUS */
struct simple_motor_status_t {

    /**
     * Range: 
     * Scale:
     * Offset:
     * start value: 0
     * send type: unset
     * get start bit: 0
     * get size: 1
     */
    uint8_t motor_status_wheel_error;
    
    /**
     * Range: 
     * Scale:
     * Offset:
     * start value: 0
     * send type: unset
     * get start bit: 8
     * get size: 16
     */
    uint8_t motor_status_speed_kph;
    
};



#define BUS_NAME "test_bus"

// typedef struct for a message
typedef struct {
    int id;
} Message;

#ifdef __cplusplus
}
#endif

#endif
