

// HEADER FILE
// Bus name is test_bus
// Bus type is CAN_2.0A
// Bus --> .NodeInterfaces() --> .SentMessages() --> .Signals()
// 
    // node interface number = 0
    // node = 0
    

    // node interface number = 0
    // node = 1
     // messages ID sent = 100: DRIVER_HEARTBEAT, 
        // signals size sent = 
            // NameSignal DRIVER_HEARTBEAT_cmd  DRIVER_HEARTBEAT_cmd_NOOP DRIVER_HEARTBEAT_cmd_SYNC DRIVER_HEARTBEAT_cmd_REBOOT  
     // messages ID sent = 101: MOTOR_CMD, 
        // signals size sent = 
            // NameSignal MOTOR_CMD_steer 
            // NameSignal MOTOR_CMD_drive 
    

    // node interface number = 0
    // node = 2
     // messages ID sent = 500: IO_DEBUG, 
        // signals size sent = 
            // NameSignal IO_DEBUG_test_unsigned 
            // NameSignal IO_DEBUG_test_enum  IO_DEBUG_test2_enum_one IO_DEBUG_test2_enum_two  
            // NameSignal IO_DEBUG_test_signed 
            // NameSignal IO_DEBUG_test_float 
    

    // node interface number = 0
    // node = 3
     // messages ID sent = 400: MOTOR_STATUS, 
        // signals size sent = 
            // NameSignal MOTOR_STATUS_wheel_error 
            // NameSignal MOTOR_STATUS_speed_kph 
    

    // node interface number = 0
    // node = 4
    

 
/**
 * This file was generated by GHESBORO OMAR!! impazzisco - version 0.1.
 */

#ifndef SIMPLE_H
#define SIMPLE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SIMPLE_DRIVER_HEARTBEAT_FRAME_ID (0x64u)
#define SIMPLE_MOTOR_CMD_FRAME_ID (0x65u)
#define SIMPLE_IO_DEBUG_FRAME_ID (0x1F4u)
#define SIMPLE_MOTOR_STATUS_FRAME_ID (0x190u)

/* Frame lengths in bytes. */
#define SIMPLE_DRIVER_HEARTBEAT_LENGTH (1u)
#define SIMPLE_MOTOR_CMD_LENGTH (1u)
#define SIMPLE_IO_DEBUG_LENGTH (4u)
#define SIMPLE_MOTOR_STATUS_LENGTH (3u)

/* Extended or standard frame types. */
#define SIMPLE_DRIVER_HEARTBEAT_IS_EXTENDED (0)
#define SIMPLE_MOTOR_CMD_IS_EXTENDED (0)
#define SIMPLE_IO_DEBUG_IS_EXTENDED (0)
#define SIMPLE_MOTOR_STATUS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define SIMPLE_DRIVER_HEARTBEAT_CYCLE_TIME_MS (1000u)
#define SIMPLE_MOTOR_CMD_CYCLE_TIME_MS (100u)
#define SIMPLE_IO_DEBUG_CYCLE_TIME_MS (100u)
#define SIMPLE_MOTOR_STATUS_CYCLE_TIME_MS (100u)

/* Signal choices. */
#define SIMPLE_DRIVER_HEARTBEAT_DRIVER_HEARTBEAT_CMD_DRIVER_HEARTBEAT_CMD_NOOP_CHOICE (0u)
#define SIMPLE_DRIVER_HEARTBEAT_DRIVER_HEARTBEAT_CMD_DRIVER_HEARTBEAT_CMD_SYNC_CHOICE (1u)
#define SIMPLE_DRIVER_HEARTBEAT_DRIVER_HEARTBEAT_CMD_DRIVER_HEARTBEAT_CMD_REBOOT_CHOICE (2u)
#define SIMPLE_IO_DEBUG_IO_DEBUG_TEST_ENUM_IO_DEBUG_TEST2_ENUM_ONE_CHOICE (1u)
#define SIMPLE_IO_DEBUG_IO_DEBUG_TEST_ENUM_IO_DEBUG_TEST2_ENUM_TWO_CHOICE (2u)

/* Frame Names. */

/* Signal Names. */

/* Struct */
/* Declarations */ 


/* Signals in message DRIVER_HEARTBEAT */
struct simple_driver_heartbeat_t {

    /**
     * Range: 
     * Scale: 0
     * Offset:
     */
    uint8_t driver_heartbeat_cmd;
    
};

/* Signals in message MOTOR_CMD */
struct simple_motor_cmd_t {

    /**
     * Range: 
     * Scale: 0
     * Offset:
     */
    uint8_t motor_cmd_steer;
    
    /**
     * Range: 
     * Scale: 0
     * Offset:
     */
    uint8_t motor_cmd_drive;
    
};

/* Signals in message IO_DEBUG */
struct simple_io_debug_t {

    /**
     * Range: 
     * Scale: 0
     * Offset:
     */
    uint8_t io_debug_test_unsigned;
    
    /**
     * Range: 
     * Scale: 0
     * Offset:
     */
    uint8_t io_debug_test_enum;
    
    /**
     * Range: 
     * Scale: 0
     * Offset:
     */
    uint8_t io_debug_test_signed;
    
    /**
     * Range: 
     * Scale: 0
     * Offset:
     */
    uint8_t io_debug_test_float;
    
};

/* Signals in message MOTOR_STATUS */
struct simple_motor_status_t {

    /**
     * Range: 
     * Scale: 0
     * Offset:
     */
    uint8_t motor_status_wheel_error;
    
    /**
     * Range: 
     * Scale: 0
     * Offset:
     */
    uint8_t motor_status_speed_kph;
    
};



#define BUS_NAME "test_bus"

// typedef struct for a message
typedef struct {
    int id;
} Message;

#ifdef __cplusplus
}
#endif

#endif
