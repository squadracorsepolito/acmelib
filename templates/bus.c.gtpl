{{define "bus_c"}}
/**
 * This file was generated by TOP HO FATTO IL .H, a noi due! version 0.1.
 */

#include <string.h>

#include "{{ .fileName | toLower }}.h"

{{range .packHelpers}}
{{.}}
{{end}}

{{range .unpackHelpers}}
{{.}}
{{end}}

{{ range .Bus.NodeInterfaces }}{{ range .SentMessages }}{{ $messageName := .Name }}
int {{ $.dbName | toLower }}_{{ $messageName | toLower }}_pack(
    uint8_t *dst_p,
    const struct {{ $.dbName | toLower }}_{{ $messageName | toLower }}_t *src_p,
    size_t size)
{
    {{ range .Signals }}{{ $signalName := .Name }}{{ $signalSize := getLenByte .GetSize -}}
    {{- if eq .Kind.String "standard" -}}
        {{- if eq "int" (isSignedType .Type.Signed) -}}
            uint{{ $signalSize }}_t {{ toLower $signalName }};
        {{- end -}}
    {{- else if eq .Kind.String "enum" -}}
        {{- if eq "int" (isEnumSigned .Enum.Values) -}}
            uint{{ $signalSize }}_t {{ toLower $signalName }};
        {{- end -}}
    {{- end }}{{ end }}

    if (size < {{ .SizeByte }}u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, {{ .SizeByte }});

    {{ range .Signals }}{{ $signalName := .Name }}{{ $signalSize := getLenByte .GetSize -}}
    // startBit = {{ .GetStartBit }}
    // size = {{ .GetSize }}
    {{ if eq .Kind.String "standard" -}}
    {{- if eq "int" (isSignedType .Type.Signed) -}}
    {{- $segments := segments .GetStartBit .GetSize -}}
    {{- range $segment := $segments -}}
    {{ toLower $signalName }} = (uint{{ $signalSize }}_t)src_p->{{ toLower $signalName }};
    dst_p[{{ $segment.Index }}] |= pack_{{ $segment.ShiftDir }}_shift_u{{ $signalSize }}({{ toLower $signalName }}, {{ $segment.Shift }}u, {{ hexMap $segment.Mask }});
    {{ end -}}
    {{- else -}}
    {{- $segments := segments .GetStartBit .GetSize -}}
    {{- range $segment := $segments -}}
    dst_p[{{ $segment.Index }}] |= pack_{{ $segment.ShiftDir }}_shift_u{{ $signalSize }}(src_p->{{ toLower $signalName }}, {{ $segment.Shift }}u, {{ hexMap $segment.Mask }});
    {{ end }}{{ end -}}
    {{- else if eq .Kind.String "enum" -}}
    {{- if eq "int" (isEnumSigned .Enum.Values) -}}
    {{- $segments := segments .GetStartBit .GetSize -}}
    {{- range $segment := $segments -}}
    {{ toLower $signalName }} = (uint{{ $signalSize }}_t)src_p->{{ $signalName }};
    dst_p[{{ $segment.Index }}] |= pack_{{ $segment.ShiftDir }}_shift_u{{ $signalSize }}({{ toLower $signalName }}, {{ $segment.Shift }}u, {{ hexMap $segment.Mask }});
    {{ end }}{{ else -}}
    {{- $segments := segments .GetStartBit .GetSize -}}
    {{- range $segment := $segments -}}
    dst_p[{{ $segment.Index }}] |= pack_{{ $segment.ShiftDir }}_shift_u{{ $signalSize }}(src_p->{{ toLower $signalName }}, {{ $segment.Shift }}u, {{ hexMap $segment.Mask }});
    {{ end }}{{ end -}}
    {{- else -}}
    {{- $segments := segments .GetStartBit .GetSize -}}
    {{- range $segment := $segments -}}
    dst_p[{{ $segment.Index }}] |= pack_{{ $segment.ShiftDir }}_shift_u{{ $signalSize }}(src_p->{{ toLower $signalName }}, {{ $segment.Shift }}u, {{ hexMap $segment.Mask }});
    {{ end }}{{ end }}{{ end }}

    return ({{ .SizeByte }});
}

int {{ $.dbName | toLower }}_{{ $messageName | toLower }}_unpack(
    struct {{ $.dbName | toLower }}_{{ $messageName | toLower }}_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    {{ range .Signals }}{{ $signalName := .Name }}{{ $signalSize := getLenByte .GetSize -}}
    {{- if eq .Kind.String "standard" -}}
        {{- if eq "int" (isSignedType .Type.Signed) -}}
            uint{{ $signalSize }}_t {{ toLower $signalName }};
        {{- end -}}
    {{- else if eq .Kind.String "enum" -}}
        {{- if eq "int" (isEnumSigned .Enum.Values) -}}
            uint{{ $signalSize }}_t {{ toLower $signalName }};
        {{- end -}}
    {{- end }}{{ end }}
    
    if (size < {{ .SizeByte }}u) {
        return (-EINVAL);
    }

    {{ range .Signals }}{{ $signalName := .Name }}{{ $signalSize := getLenByte .GetSize -}}
    {{ if eq .Kind.String "standard" -}}
    {{- if eq "int" (isSignedType .Type.Signed) -}}
    {{- $segments := segments .GetStartBit .GetSize -}}
    {{- $i := 0 }}{{ range $segment := $segments -}}
    {{ toLower $signalName }} {{ if eq $i 0 }}={{ else }}|={{ end }} unpack_{{ $segment.ShiftDir }}_shift_u{{ $signalSize }}(src_p[{{ $segment.Index }}], {{ $segment.Shift }}u, {{ hexMap $segment.Mask }});
    dst_p->{{ toLower $signalName }} = (int{{ $signalSize }}_t){{ toLower $signalName }};
    {{ $i = add $i 1 -}}
    {{- end -}}
    {{- else -}}
    {{- $segments := segments .GetStartBit .GetSize -}}
    {{- $i := 0 }}{{- range $segment := $segments -}}
    dst_p->{{ toLower $signalName }} {{ if eq $i 0 }}={{ else }}|={{ end }} unpack_{{ $segment.ShiftDir }}_shift_u{{ $signalSize }}(src_p[{{ $segment.Index }}], {{ $segment.Shift }}u, {{ hexMap $segment.Mask }});
    {{ $i = add $i 1 -}}
    {{- end }}{{ end }}
    {{- else if eq .Kind.String "enum" -}}
    {{- if eq "int" (isEnumSigned .Enum.Values) -}}
    {{- $segments := segments .GetStartBit .GetSize -}}
    {{- $i := 0 }}{{- range $segment := $segments -}}
    {{ toLower $signalName }} {{ if eq $i 0 }}={{ else }}|={{ end }} unpack_{{ $segment.ShiftDir }}_shift_u{{ $signalSize }}(src_p[{{ $segment.Index }}], {{ $segment.Shift }}u, {{ hexMap $segment.Mask }});
    dst_p->{{ toLower $signalName }} = (int{{ $signalSize }}_t){{ toLower $signalName }};
    {{ $i = add $i 1 -}}
    {{- end -}}
    {{ else -}}
    {{- $segments := segments .GetStartBit .GetSize -}}
    {{- $i := 0 }}{{- range $segment := $segments -}}
    dst_p->{{ toLower $signalName }} {{ if eq $i 0 }}={{ else }}|={{ end }} unpack_{{ $segment.ShiftDir }}_shift_u{{ $signalSize }}(src_p[{{ $segment.Index }}], {{ $segment.Shift }}u, {{ hexMap $segment.Mask }});
    {{ $i = add $i 1 -}}
    {{- end }}{{ end -}}
    {{- else -}}
    {{- $segments := segments .GetStartBit .GetSize -}}
    {{- $i := 0 }}{{- range $segment := $segments -}}
    dst_p->{{ toLower $signalName }} {{ if eq $i 0 }}={{ else }}|={{ end }} unpack_{{ $segment.ShiftDir }}_shift_u{{ $signalSize }}(src_p[{{ $segment.Index }}], {{ $segment.Shift }}u, {{ hexMap $segment.Mask }});
    {{ $i = add $i 1 -}}
    {{ end }}{{ end }}{{ end }}

    return (0);
}

{{ range .Signals }}{{ $signalName := .Name }}{{ $signalSize := getLenByte .GetSize }}
{{ if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values }}{{ end }}{{ $signalSize }}_t {{ toLower $.dbName }}_{{ toLower $messageName }}_{{ toLower $signalName }}_encode(double value)
{
    return ({{ if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values }}{{ end }}{{ $signalSize }}_t)({{ if (eq .Kind.String "standard") }}{{ generateEncoding .Type.Scale .Type.Offset false }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ generateEncoding 1 0 true }}{{ end }});
}
double {{ toLower $.dbName }}_{{ toLower $messageName }}_{{ toLower $signalName }}_decode({{ if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values }}{{ end }}{{ $signalSize }}_t value)
{
    return ({{ if (eq .Kind.String "standard") }}{{ generateDecoding .Type.Scale .Type.Offset true }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ generateDecoding 1 0 false }}{{ end }});
}
bool {{ toLower $.dbName }}_{{ toLower $messageName }}_{{ toLower $signalName }}_is_in_range({{ if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values }}{{ end }}{{ $signalSize }}_t value)
{
    {{ if eq .Kind.String "standard" -}}
    {{- if eq "int" (isSignedType .Type.Signed) -}} 
    // {{ .Type.Min }} <= value <= {{ .Type.Max }}
    return (true);
    {{ else -}}
    // {{ .Type.Min }} <= value <= {{ .Type.Max }}
    return ({{ isInRange .Type.Min .Type.Max .Type.Size 0 }});
    {{ end -}}
    {{- else -}}
    return (true);
    {{- end }}
}
{{ end }}{{ end }}{{ end }}
{{ end }}