{{define "bus_h"}}
/**
 * This file was generated by GHESBORO OMAR!! impazzisco - version 0.1.
 */

#ifndef {{ toUpper .dbName }}_H
#define {{ toUpper .dbName }}_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
{{ range .Bus.NodeInterfaces -}}
    {{- range .SentMessages -}}
        #define {{ toUpper $.dbName }}_{{ .Name | camelToSnake | toUpper }}_FRAME_ID ({{ toUint .ID}})
{{ end }}{{ end }}

/* Frame lengths in bytes. */
{{ range .Bus.NodeInterfaces -}}
    {{- range .SentMessages -}}
        #define {{ toUpper $.dbName }}_{{ .Name | camelToSnake | toUpper }}_LENGTH ({{ toUint .SizeByte }})
{{ end }}{{ end }}

/* Extended or standard frame types. */
{{ range .Bus.NodeInterfaces -}}
    {{- range .SentMessages -}}
        #define {{ toUpper $.dbName }}_{{ .Name | camelToSnake | toUpper }}_IS_EXTENDED ({{ isExtended .ID }})
{{ end }}{{ end }}

/* Frame cycle times in milliseconds. */
{{ range .Bus.NodeInterfaces -}}
    {{- range .SentMessages -}}
        #define {{ toUpper $.dbName }}_{{ .Name | camelToSnake | toUpper }}_CYCLE_TIME_MS ({{ toUint .CycleTime }})
{{ end }}{{ end }}

/* Signal choices. */
{{ range .Bus.NodeInterfaces -}}
    {{- range .SentMessages }}{{ $messageName := .Name }}
        {{- range .Signals }}{{ $signalName := .Name }}{{ if (eq .Kind.String "enum") }}
            {{- range .Enum.Values -}}
                #define {{ toUpper $.dbName }}_{{ $messageName | camelToSnake | toUpper }}_{{ $signalName | camelToSnake | toUpper }}_{{ .Name | camelToSnake | toUpper }}_CHOICE ({{ .Index }}u)
{{ end }}{{ end }}{{ end }}{{ end }}{{ end }}

/* Frame Names. */
{{ range .Bus.NodeInterfaces -}}
    {{- range .SentMessages }}{{ if and (ne .Name "") (or (gt (len .Receivers) 0) (ne .SenderNodeInterface nil)) -}}
        #define {{ toUpper $.dbName }}_{{ .Name | camelToSnake | toUpper }}_NAME "{{ .Name }}"
{{ end }}{{ end }}{{ end }}

/* Signal Names. */
{{ range .Bus.NodeInterfaces -}}
    {{- range .SentMessages }}{{ if and (ne .Name "") (or (gt (len .Receivers) 0) (ne .SenderNodeInterface nil)) }}{{ $messageName := .Name }}
        {{- range .Signals -}}
        #define {{ toUpper $.dbName }}_{{ $messageName | camelToSnake | toUpper }}_{{ .Name | camelToSnake | toUpper }}_NAME "{{ .Name }}"
{{ if (eq .Kind.String "multiplexer") -}}
        {{- range ExtractSignalsFromMux .ToMultiplexer.GetSignalGroups -}}
        #define {{ toUpper $.dbName }}_{{ $messageName | camelToSnake | toUpper }}_{{ .Name | camelToSnake | toUpper }}_NAME "{{ .Name }}"
{{ end }}{{ end }}{{ end }}{{ end }}{{ end }}{{ end }}

{{ range .Bus.NodeInterfaces }}{{ range .SentMessages }}{{ $messageName := .Name }}
/**
 * Signals in message {{ $messageName }}.
 *
 * All signal values are as on the CAN bus.
 *
 */
struct {{ toLower $.dbName }}_{{ toLower $messageName }}_t {
{{- range .Signals }}
{{ GenerateSignalStruct . }}
{{ end }}};{{ end }}{{ end }}

{{ range .Bus.NodeInterfaces }}{{ range .SentMessages }}{{ $messageName := .Name }}
/**
 * Pack message {{ $messageName }}.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int {{ $.dbName | toLower }}_{{ $messageName | toLower }}_pack(
    uint8_t *dst_p,
    const struct {{ toLower $.dbName }}_{{ toLower $messageName }}_t *src_p,
    size_t size);

/**
 * Unpack message {{ $messageName }}.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int {{ toLower $.dbName }}_{{ toLower $messageName }}_unpack(
    struct {{ toLower $.dbName }}_{{ toLower $messageName }}_t *dst_p,
    const uint8_t *src_p,
    size_t size);
{{ range .Signals }}{{ $signalName := .Name }}{{ $signalSize := .GetSize | getLenByte }}
/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
{{ if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed -}}
{{ $signalSize }}_t {{ toLower $.dbName }}_{{ toLower $messageName }}_{{ toLower $signalName }}_encode(double value);
{{- else if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values -}}
{{ $signalSize }}_t {{ toLower $.dbName }}_{{ toLower $messageName }}_{{ toLower $signalName }}_encode(double value);
{{- else if (eq .Kind.String "multiplexer") -}}
    {{- range .ToMultiplexer.GetSignalGroups }}{{ range . -}}
    {{- if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed }}{{ end -}}
    {{- if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values }}{{ end -}}
    {{ $signalSize }}_t {{ toLower $.dbName }}_{{ toLower $messageName }}_{{ toLower $signalName }}_encode(double value);

/** Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double {{ toLower $.dbName }}_{{ toLower $messageName }}_{{ toLower $signalName }}_decode({{ if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values }}{{ end }}{{ $signalSize }}_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool {{ toLower $.dbName }}_{{ toLower $messageName }}_{{ toLower $signalName }}_is_in_range({{ if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values }}{{ end }}{{ $signalSize }}_t value);
{{ end }}{{ end }}{{ end }}{{ end }}{{ end }}{{ end }}

#ifdef __cplusplus
}
#endif

#endif
{{end}}