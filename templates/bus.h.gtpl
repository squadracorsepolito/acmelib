{{define "bus_h"}}
/**
 * This file was generated by GHESBORO OMAR!! impazzisco - version 0.1.
 */

#ifndef {{ .dbName | toUpper }}_H
#define {{ .dbName | toUpper }}_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
{{- range .Bus.NodeInterfaces -}}
{{- range .SentMessages }}
#define {{ $.dbName | toUpper }}_{{ .Name | camelToSnake | toUpper }}_FRAME_ID ({{ .ID | toUint }})
{{- end -}}
{{- end }}

/* Frame lengths in bytes. */
{{- range .Bus.NodeInterfaces -}}
{{- range .SentMessages }}
#define {{ $.dbName | toUpper }}_{{ .Name | camelToSnake | toUpper }}_LENGTH ({{ .SizeByte | toUint }})
{{- end -}}
{{- end }}

/* Extended or standard frame types. */
{{- range .Bus.NodeInterfaces -}}
{{- range .SentMessages }}
#define {{ $.dbName | toUpper }}_{{ .Name | camelToSnake | toUpper }}_IS_EXTENDED ({{ .ID | isExtended }})
{{- end -}}
{{- end }}

/* Frame cycle times in milliseconds. */
{{- range .Bus.NodeInterfaces -}}
{{- range .SentMessages }}
#define {{ $.dbName | toUpper }}_{{ .Name | camelToSnake | toUpper }}_CYCLE_TIME_MS ({{ .CycleTime | toUint }})
{{- end -}}
{{- end }}

/* Signal choices. */
{{- range .Bus.NodeInterfaces -}}
{{- range .SentMessages }}
{{- $messageName := .Name }}
{{- range .Signals }}
{{- $signalName := .Name }}
{{- if (eq .Kind.String "enum") }}
{{- range .Enum.Values }}
#define {{ $.dbName | toUpper }}_{{ $messageName | camelToSnake | toUpper }}_{{ $signalName | camelToSnake | toUpper }}_{{ .Name | camelToSnake | toUpper }}_CHOICE ({{ .Index }}u)
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

/* Frame Names. */
{{- range .Bus.NodeInterfaces -}}
{{- range .SentMessages }}
{{- if and (ne .Name "") (or (gt (len .Receivers) 0) (ne .SenderNodeInterface nil)) }}
#define {{ $.dbName | toUpper }}_{{ .Name | camelToSnake | toUpper }}_NAME ("{{ .Name }}")
{{- end }}
{{- end -}}
{{- end }}

/* Signal Names. */
{{- range .Bus.NodeInterfaces -}}
{{- range .SentMessages }}
{{- if and (ne .Name "") (or (gt (len .Receivers) 0) (ne .SenderNodeInterface nil)) }}
{{- $messageName := .Name }}
{{- range .Signals }}
#define {{ $.dbName | toUpper }}_{{ $messageName | camelToSnake | toUpper }}_{{ .Name | camelToSnake | toUpper }}_NAME ("{{ .Name }}")
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{ range .Bus.NodeInterfaces }}{{ range .SentMessages }}{{ $messageName := .Name }}
/**
 * Signals in message {{ $messageName }}.
 *
 * All signal values are as on the CAN bus.
 *
 */
struct {{ $.dbName | toLower }}_{{ $messageName | toLower }}_t { {{ range .Signals }}{{ if (eq .Kind.String "standard") }}
    /**
     * Range: {{ formatRange .Type.Min .Type.Max .Type.Offset .Type.Scale}}
     * Scale: {{ .Type.Scale }}
     * Offset: {{ .Type.Offset }}
     */
    {{ isSignedType .Type.Signed }}{{ .Type.Size | getLenByte }}_t {{ .Name | toLower }};
{{ end }}{{ if (eq .Kind.String "enum") }}
    /**
     * Range: {{ formatRange (index .Enum.Values 0).Index (index .Enum.Values (sub (len .Enum.Values) 1)).Index 0 1 }}
     * Scale: 1
     * Offset: 0
     */
    {{ isEnumSigned .Enum.Values }}{{ .GetSize | getLenByte }}_t {{ .Name | toLower }};
{{ end }}{{- end }}};
{{ end }}{{ end -}}

{{- range .Bus.NodeInterfaces }}{{ range .SentMessages }}{{ $messageName := .Name }}
/**
 * Pack message {{ $messageName }}.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int {{ $.dbName | toLower }}_{{ $messageName | toLower }}_pack(
    uint8_t *dst_p,
    const struct {{ $.dbName | toLower }}_{{ $messageName | toLower }}_t *src_p,
    size_t size);

/**
 * Unpack message {{ $messageName }}.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int {{ $.dbName | toLower }}_{{ $messageName | toLower }}_unpack(
    struct {{ $.dbName | toLower }}_{{ $messageName | toLower }}_t *dst_p,
    const uint8_t *src_p,
    size_t size);
{{ range .Signals }}{{ $signalName := .Name }}{{ $signalSize := .GetSize | getLenByte }}
/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
{{ if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values }}{{ end }}{{ $signalSize }}_t {{ $.dbName | toLower }}_{{ $messageName | toLower }}_{{ $signalName | toLower }}_encode(double value);

/** Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double {{ $.dbName | toLower }}_{{ $messageName | toLower }}_{{ $signalName | toLower }}_decode({{ if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values }}{{ end }}{{ $signalSize }}_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool {{ $.dbName | toLower }}_{{ $messageName | toLower }}_{{ $signalName | toLower }}_is_in_range({{ if (eq .Kind.String "standard") }}{{ isSignedType .Type.Signed }}{{ end }}{{ if (eq .Kind.String "enum") }}{{ isEnumSigned .Enum.Values }}{{ end }}{{ $signalSize }}_t value);
{{ end }}{{ end }}{{ end }}

#ifdef __cplusplus
}
#endif

#endif
{{end}}